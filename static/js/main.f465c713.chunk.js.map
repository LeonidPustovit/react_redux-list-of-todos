{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoFilter/TodoFilter.tsx","components/TodoList/TodoList.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","text","newStatus","filterReducer","query","status","todos","todosReducer","getFilterQuery","filter","getFilterStatus","getStateTodos","getSelectedTodo","currentTodo","Status","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","useState","visibleTodos","setVisibleTodos","useSelector","selectedTodo","useEffect","preparedTodos","title","toLowerCase","includes","completed","Error","className","map","id","classnames","onClick","dispatch","TodoFilter","onSubmit","event","preventDefault","onChange","target","value","All","Active","Completed","filterActions","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","user","setUser","userId","userFromServer","href","email","name","App","isTodosLoading","setIsTodosLoading","isModalActive","setIsModalActive","catch","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f465c713.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n\n    case 'currentTodo/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\n// #region Types\ntype SetQuery = {\n  type: 'filter/SETQUERY',\n  payload: string,\n};\ntype SetStatus = {\n  type: 'filter/SETSTATUS',\n  payload: Status,\n};\ntype ResetState = { type: 'filter/RESET' };\ntype ResetQuery = { type: 'filter/RESETQUERY' };\n// #endregion\n\n// #region Actions\nconst setQuery = (text: string): SetQuery => (\n  { type: 'filter/SETQUERY', payload: text }\n);\nconst setStatus = (newStatus: Status): SetStatus => (\n  { type: 'filter/SETSTATUS', payload: newStatus }\n);\nconst resetState = (): ResetState => ({ type: 'filter/RESET' });\nconst resetQuery = (): ResetQuery => ({ type: 'filter/RESETQUERY' });\n\nexport const actions = {\n  setQuery,\n  setStatus,\n  resetState,\n  resetQuery,\n};\n// #endregion\n\nexport type FilterState = {\n  query: string,\n  status: Status,\n};\ntype Action = SetQuery | SetStatus | ResetState | ResetQuery;\n\nconst filterReducer = (\n  state: FilterState = { query: '', status: 'all' },\n  action: Action,\n): FilterState => {\n  switch (action.type) {\n    case 'filter/SETQUERY':\n      return { ...state, query: action.payload };\n\n    case 'filter/SETSTATUS':\n      return { ...state, status: action.payload };\n\n    case 'filter/RESET':\n      return { query: '', status: 'all' };\n\n    case 'filter/RESETQUERY':\n      return { ...state, query: '' };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype GetTodos = { type: 'Todos/SET', payload: Todo[] };\n\nconst setTodos = (todos: Todo[]): GetTodos => (\n  { type: 'Todos/SET', payload: todos }\n);\n\nexport const actions = { setTodos };\n\ntype Action = GetTodos;\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'Todos/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\nimport { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport function getFilterQuery(state: RootState): string {\n  return state.filter.query;\n}\n\nexport function getFilterStatus(state: RootState): Status {\n  return state.filter.status;\n}\n\nexport function getStateTodos(state: RootState): Todo[] {\n  return state.todos;\n}\n\nexport function getSelectedTodo(state: RootState): Todo | null {\n  return state.currentTodo;\n}\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n// import { useSelector } from 'react-redux';\nimport { getFilterQuery, store } from '../../app/store';\nimport { actions as filterActions } from '../../features/filter';\n\nenum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport const TodoFilter: React.FC = () => {\n  const query: string = useSelector(getFilterQuery);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => {\n        event.preventDefault();\n      }}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(event) => {\n              const newStatus = event.target.value;\n\n              if (newStatus === Status.All\n                || newStatus === Status.Active\n                || newStatus === Status.Completed\n              ) {\n                store.dispatch(filterActions.setStatus(newStatus));\n              }\n            }}\n          >\n            <option value={Status.All}>All</option>\n            <option value={Status.Active}>Active</option>\n            <option value={Status.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            store.dispatch(filterActions.setQuery(event.target.value));\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => {\n                  store.dispatch(filterActions.resetQuery());\n                }}\n              />\n            </>\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","/* eslint-disable max-len */\nimport classnames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  getFilterQuery,\n  getFilterStatus,\n  getSelectedTodo,\n  getStateTodos,\n  store,\n} from '../../app/store';\nimport { actions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>([]);\n\n  const todos = useSelector(getStateTodos);\n  const query: string = useSelector(getFilterQuery);\n  const status: Status = useSelector(getFilterStatus);\n  const selectedTodo: Todo | null = useSelector(getSelectedTodo);\n\n  useEffect(() => {\n    const preparedTodos = [...todos].filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n\n    switch (status) {\n      case 'all':\n        setVisibleTodos(preparedTodos);\n        break;\n\n      case 'active':\n        setVisibleTodos(preparedTodos.filter(todo => (\n          !todo.completed\n        )));\n        break;\n\n      case 'completed':\n        setVisibleTodos(preparedTodos.filter(todo => (\n          todo.completed\n        )));\n        break;\n\n      default:\n        throw new Error('status Error in TodoList');\n    }\n  }, [query, status, todos]);\n\n  return (\n    <>\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visibleTodos.map(todo => {\n            return (\n              <tr\n                data-cy=\"todo\"\n                key={todo.id}\n              >\n                <td className=\"is-vcentered\">{todo.id}</td>\n                <td className=\"is-vcentered\">\n                  {todo.completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered\">\n                  <p className={classnames({\n                    'has-text-danger': !todo.completed,\n                    'has-text-success': todo.completed,\n                  })}\n                  >\n                    {todo.title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => {\n                      if (selectedTodo === null) {\n                        store.dispatch(actions.setTodo(todo));\n                      } else {\n                        store.dispatch(actions.removeTodo());\n                      }\n                    }}\n                  >\n                    <span className=\"icon\">\n                      <i className={classnames('far', {\n                        'fa-eye-slash': todo.id === selectedTodo?.id,\n                        'fa-eye': todo.id !== selectedTodo?.id,\n                      })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { getUser } from '../../api';\nimport { getSelectedTodo, store } from '../../app/store';\nimport { actions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User>();\n\n  const todo = useSelector(getSelectedTodo);\n\n  useEffect(() => {\n    if (todo?.userId) {\n      getUser(todo?.userId)\n        .then(userFromServer => setUser(userFromServer));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo?.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                store.dispatch(actions.removeTodo());\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { useSelector } from 'react-redux';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\nimport { getSelectedTodo, store } from './app/store';\n\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [isTodosLoading, setIsTodosLoading] = useState(false);\n  const [isModalActive, setIsModalActive] = useState(false);\n\n  const selectedTodo: Todo | null = useSelector(getSelectedTodo);\n\n  useEffect(() => {\n    if (selectedTodo === null) {\n      setIsModalActive(false);\n    } else {\n      setIsModalActive(true);\n    }\n  }, [selectedTodo]);\n\n  useEffect(() => {\n    setIsTodosLoading(true);\n    getTodos()\n      .then(res => store.dispatch(actions.setTodos(res)))\n      .catch(() => {\n        throw new Error('Loading Todos error');\n      })\n      .finally(() => setIsTodosLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isTodosLoading\n                ? (<Loader />) : (\n                  <TodoList />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {isModalActive && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}